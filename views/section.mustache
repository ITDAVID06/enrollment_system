<div>
    <h2>Section List</h2>
    <button id="addSectionButton">Add Section</button>

    <table border="1" id="sectionTable">
        <thead>
            <tr>
                <th>Section</th>
                <th>Program</th>
                <th>Semester</th>
                <th>Year Level</th>
                <th>Course Count</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <!-- Dynamically populated with JavaScript -->
        </tbody>
    </table>
</div>

<!-- Update the courses table header -->
<table class="courses-table" id="coursesTable" border="1">
    <thead>
        <tr>
            <th>Course Code</th>
            <th>Monday</th>
            <th>Tuesday</th>
            <th>Wednesday</th>
            <th>Thursday</th>
            <th>Friday</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        <!-- Courses will be dynamically populated here -->
    </tbody>
</table>

<div style="display: flex; flex-direction: column;">
    <!-- Button to load courses -->
    <button id="loadCoursesButton">View All Courses</button>

    <!-- Table for displaying courses -->
    <table id="coursesTable" border="1" style="width: 100%; margin-top: 20px; display: none;">
        <thead>
            <tr>
                <th>Course ID</th>
                <th>Course Code</th>
                <th>Time From</th>
                <th>Time To</th>
                <th>Day</th>
                <th>Semester</th>
                <th>School Year</th>
                <th>Room</th>
                <th>Section ID</th>
                <th>Program ID</th>
            </tr>
        </thead>
        <tbody>
            <!-- Rows will be dynamically inserted here -->
        </tbody>
    </table>
</div>




<tbody id="sectionTableBody">
    <!-- Dynamically populated with JavaScript -->
</tbody>

<!-- Add Section Modal -->
<div id="addSectionModal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeAddSectionModal()">&times;</span>
        <h3>Add Section</h3>
        <form id="addSectionForm">
            <label for="program">Program:</label>
            <select id="program" name="program_id" required>
                {{#programs}}
                <option value="{{id}}">{{program_code}}</option>
                {{/programs}}
            </select>

            <label for="semester">Semester:</label>
            <select id="semester" name="semester" required>
                <option value="1st Sem">1st Sem</option>
                <option value="2nd Sem">2nd Sem</option>
            </select>

            <label for="yearLevel">Year Level:</label>
            <select id="yearLevel" name="year_level" required>
                <option value="1">1st Year</option>
                <option value="2">2nd Year</option>
                <option value="3">3rd Year</option>
                <option value="4">4th Year</option>
            </select>

            <label for="sectionName">Section Name:</label>
            <input type="text" id="sectionName" name="name" required>

            <button type="submit">Add Section</button>
        </form>
    </div>
</div>


<!-- Edit Schedule Modal -->
<div id="editScheduleModal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeEditScheduleModal()">&times;</span>
        <h3>Edit Schedule</h3>
        <form id="editScheduleForm">
            <input type="hidden" id="courseId" name="course_id">
            
            <label for="instructorName">Instructor Name:</label>
            <input type="text" id="instructorName" name="instructor_name" required>

            <!-- Schedule inputs for each day -->
            ${['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'].map(day => `
                <div>
                    <label>${day}:</label>
                    <input type="checkbox" id="${day.toLowerCase()}" name="days[]" value="${day}">
                    <input type="time" id="${day.toLowerCase()}_start" name="${day.toLowerCase()}_start"> to
                    <input type="time" id="${day.toLowerCase()}_end" name="${day.toLowerCase()}_end">
                </div>
            `).join('')}
            
            <button type="submit">Update Schedule</button>
        </form>
    </div>
</div>




<style>
    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        padding-top: 100px;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
    }

    .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 50%;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

    .close:hover,
    .close:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
    }
</style>


<script>

    
// Load all sections on page load
const loadSections = async () => {
    try {
        const response = await fetch('/api/sections');  // Use the new API route
        
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }

        const data = await response.json(); // Directly parse as JSON
        console.log(data);

        // Render sections
        const tableBody = document.querySelector('#sectionTable tbody');
        if (data.sections && Array.isArray(data.sections)) {
            tableBody.innerHTML = data.sections.map(section => `
                <tr>
                    <td>${section.name}</td>
                    <td>${section.program_code}</td>
                    <td>${section.semester}</td>
                    <td>${section.year_level}</td>
                    <td>${section.course_count || 0}</td>
                    <td>
                        <button onclick="editSection(${section.id})">Edit</button>
                        <button onclick="deleteSection(${section.id})">Delete</button>
                    </td>
                    <td>
                <button onclick="toggleCourses(${section.id})">View Courses</button>
            </td>
        </tr>
        <tr class="courses-row" id="courses-row-${section.id}" style="display: none;">
            <td colspan="6">
                <table class="courses-table" id="courses-table-${section.id}" border="1">
                    <thead>
                        <tr>
                            <th>Course Name</th>
                            <th>Instructor</th>
                            <th>Schedule</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Courses will be dynamically populated here -->
                    </tbody>
                </table>
            </td>
                </tr>
            `).join('');
        } else {
            console.error('Unexpected data format:', data);
        }
    } catch (error) {
        console.error('Error fetching sections:', error);
    }
};

// Function for "Load Courses" button
const loadCourses = async (sectionId) => {
    const coursesTable = document.getElementById('coursesTable');
    const tableBody = coursesTable.querySelector('tbody');

    try {
        const response = await fetch(`/sections/courses/${sectionId}`);
        if (!response.ok) throw new Error('Failed to fetch courses');

        const courses = await response.json();
        console.log('Courses data:', courses);
        

        if (Array.isArray(courses) && courses.length > 0) {

            const groupedCourses = groupCoursesByCode(courses);
            // Populate courses table
            tableBody.innerHTML = groupedCourses.map(course => `
                <tr>
                    <td>${course.course_code}</td>
                    <td>${course.Monday || ''}</td>
                    <td>${course.Tuesday || ''}</td>
                    <td>${course.Wednesday || ''}</td>
                    <td>${course.Thursday || ''}</td>
                    <td>${course.Friday || ''}</td>
                    <td><button onclick="editSchedule('${course.course_id}, ${course.program_id}')">Edit</button></td>
                </tr>
            `).join('');
        
            coursesTable.style.display = 'table';
        } else {
             // Fetch courses by program_id and year_level if no schedules
             const responseAllCourses = await fetch(`/get-courses/${sectionId}`);
             if (!responseAllCourses.ok) throw new Error('Failed to fetch courses by program and year');
 
             const allCourses = await responseAllCourses.json();
             tableBody.innerHTML = allCourses.map(course => `
                 <tr>
                     <td>${course.course_code}</td>
                     <td></td>
                     <td></td>
                     <td></td>
                     <td></td>
                     <td></td>
                     <td><button onclick="editSchedule('${course.id}, ${course.program_id}')">Edit</button></td>
                 </tr>
             `).join('') || `<tr><td colspan="7">No courses available.</td></tr>`;
             coursesTable.style.display = 'table';
         }
        
    } catch (error) {
        console.error('Error fetching courses:', error);
    }
};

const groupCoursesByCode = (courses) => {
    const grouped = {};

    courses.forEach(course => {
        if (!grouped[course.course_code]) {
            grouped[course.course_code] = {
                course_code: course.course_code,
                course_id: course.id, // Ensure you have course_id
                program_id: course.program_id, // Ensure you have program_id
                Monday: '',
                Tuesday: '',
                Wednesday: '',
                Thursday: '',
                Friday: ''
            };
        }

        // Add schedule for the respective day
        if (course.sched_day && course.TIME_FROM && course.TIME_TO) {
            grouped[course.course_code][course.sched_day] = `${course.TIME_FROM} - ${course.TIME_TO}`;
        }
    });

    return Object.values(grouped); // Convert the object back to an array
};



loadSections();




// Open the Add Section modal
const addSectionModal = document.getElementById('addSectionModal');
document.getElementById('addSectionButton').onclick = () => {
    loadPrograms('program'); // Populate program dropdown
    addSectionModal.style.display = 'block';
};

const closeAddSectionModal = () => {
    addSectionModal.style.display = 'none';
};

// Load program options
const loadPrograms = async (dropdownId) => {
    try {
        const response = await fetch('/program/list'); // Fetch all programs
        if (!response.ok) throw new Error('Failed to fetch programs.');

        const programs = await response.json();

        // Populate the provided dropdown
        const programDropdown = document.getElementById(dropdownId);
        programDropdown.innerHTML = programs
            .map(program => `<option value="${program.id}">${program.program_code}</option>`)
            .join('');
    } catch (error) {
        console.error('Error loading programs:', error);
        alert('Failed to load programs. Please try again.');
    }
};

// Handle Add Section form submission
document.getElementById('addSectionForm').onsubmit = async (event) => {
    event.preventDefault();
    const formData = new FormData(event.target);

    await fetch('/section', {
        method: 'POST',
        body: formData
    });

    closeAddSectionModal();
    loadSections();
};

// Edit a section

const openEditSectionModal = async (sectionId) => {
    try {
        // Fetch the section details
        const sectionResponse = await fetch(`/section/${sectionId}`);
        if (!sectionResponse.ok) throw new Error('Failed to fetch section details.');
        const section = await sectionResponse.json();

        // Set the section ID in the hidden input
        document.getElementById('editSectionId').value = sectionId;

        // Load all programs into the dropdown
        await loadPrograms('editProgram'); // Pass the dropdown ID

        // Set the selected program for the section
        document.getElementById('editProgram').value = section.program_id;

        // Populate other modal fields
        document.getElementById('editSemester').value = section.semester;
        document.getElementById('editYearLevel').value = section.year_level;
        document.getElementById('editSectionName').value = section.name;

        // Show the modal
        document.getElementById('editSectionModal').style.display = 'block';
    } catch (error) {
        console.error('Error opening edit modal:', error);
        alert('Failed to load section details. Please try again.');
    }
};

const closeEditSectionModal = () => {
    document.getElementById('editSectionModal').style.display = 'none';
};

document.getElementById('editSectionModal').onsubmit = async (event) => {

    event.preventDefault();

    try {
        const formData = new FormData(event.target);
        const sectionId = formData.get('id'); // Retrieve the ID from the hidden input field

        if (!sectionId) {
            throw new Error('Section ID is missing.');
        }

        // Convert FormData to JSON-compatible object but remove the ID
        const { id, ...updatedSection } = Object.fromEntries(formData); // Destructure to exclude ID

        // Make the POST request with the ID in the route
        const response = await fetch(`/section/update/${sectionId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(updatedSection), // Send the rest of the form data without the ID
        });

        if (!response.ok) {
            throw new Error('Failed to save changes.');
        }

        // Close the modal
        closeEditSectionModal();

        // Reload the sections to reflect the changes
        loadSections();
    } catch (error) {
        console.error('Error saving section changes:', error);
        alert('Failed to save changes. Please try again.');
    }
};




// Delete a section
const deleteSection = async (sectionId) => {
    if (confirm('Are you sure you want to delete this section?')) {
        await fetch(`/section/${sectionId}`, { method: 'DELETE' });
        loadSections();
    }
};


const editSchedule = async (courseId) => {
    try {
        const response = await fetch(`/section/course/${courseId}`);
        const course = await response.json();

        // Fill form with course data
        document.getElementById('courseId').value = courseId;
        document.getElementById('instructorName').value = course.instructor_name || '';
        
        // Set checkboxes and times for each weekday
        ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'].forEach(day => {
            document.getElementById(day).checked = course[`${day}_start`] != null;
            document.getElementById(`${day}_start`).value = course[`${day}_start`] || '';
            document.getElementById(`${day}_end`).value = course[`${day}_end`] || '';
        });

        document.getElementById('editScheduleModal').style.display = 'block';
    } catch (error) {
        console.error('Error loading schedule:', error);
        alert('Failed to load schedule. Please try again.');
    }
};


// Add event listeners to enable/disable time inputs based on checkbox
const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];
days.forEach(day => {
    const checkbox = document.getElementById(`${day.toLowerCase()}_enabled`);
    const startTimeInput = document.getElementById(`${day.toLowerCase()}_start`);
    const endTimeInput = document.getElementById(`${day.toLowerCase()}_end`);

    checkbox.addEventListener('change', function() {
        const isEnabled = this.checked;
        startTimeInput.disabled = !isEnabled;
        endTimeInput.disabled = !isEnabled;
    });
});



const closeEditScheduleModal = () => {
    document.getElementById('editScheduleModal').style.display = 'none';
};

document.getElementById('editScheduleForm').onsubmit = async (event) => {
    event.preventDefault();
    const formData = new FormData(event.target);
    const courseId = formData.get('course_id');

    try {
        await fetch(`/schedule/update/${courseId}`, {
            method: 'POST',
            body: formData
        });

        closeEditScheduleModal();
        // Reload the updated schedule in the table without refreshing
        toggleCourses(document.getElementById('courseId').value);
    } catch (error) {
        console.error('Error updating schedule:', error);
    }
};

document.getElementById('editScheduleForm').onsubmit = async (event) => {
    event.preventDefault();
    const formData = new FormData(event.target);
    const courseId = formData.get('course_id');

    try {
        await fetch(`/schedule/update/${courseId}`, {
            method: 'POST',
            body: formData
        });

        closeEditScheduleModal();
        // Reload the updated schedule in the table without refreshing
        const sectionId = document.querySelector(`#courses-row-${courseId}`).dataset.sectionId;
        toggleCourses(sectionId);
    } catch (error) {
        console.error('Error updating schedule:', error);
    }
};


document.getElementById('loadCoursesButton').addEventListener('click', async () => {
    const coursesTable = document.getElementById('coursesTable');
    const tableBody = coursesTable.querySelector('tbody');

    try {
        const response = await fetch('/get-courses'); // Replace with your actual route
        if (!response.ok) {
            throw new Error('Failed to fetch courses');
        }

        const courses = await response.json();

        // Populate the table
        tableBody.innerHTML = courses.map(course => `
            <tr>
                 <td>${course.course_id}</td>
                        <td>${course.course_code}</td>
                        <td>${course.TIME_FROM}</td>
                        <td>${course.TIME_TO}</td>
                        <td>${course.sched_day}</td>
                        <td>${course.sched_semester}</td>
                        <td>${course.sched_sy}</td>
                        <td>${course.sched_room}</td>
                        <td>${course.section_id}</td>
                        <td>${course.PROGRAM_ID}</td>
            </tr>
        `).join('');

        // Show the table
        coursesTable.style.display = 'table';
    } catch (error) {
        console.error('Error fetching courses:', error);
    }
});


const toggleCourses = async (sectionId) => {
    console.log(`Fetching courses for sectionId: ${sectionId}`); // Log the sectionId
    const courseRow = document.getElementById(`courses-row-${sectionId}`);

    if (courseRow.style.display === 'none') {
        try {
            const response = await fetch(`/sections/courses/${sectionId}`);
            if (!response.ok) {
                console.error('Failed to fetch courses:', await response.text());
                throw new Error('Failed to fetch courses');
            }

            const courses = await response.json();
            console.log('Courses data:', courses); // Log the API response

            if (Array.isArray(courses) && courses.length > 0) {
                const courseTableBody = document.querySelector(`#courses-table-${sectionId} tbody`);
                courseTableBody.innerHTML = courses.map(course => `
                    <tr>
                        <td>${course.course_code}</td>
                        <td>${course.sched_day}</td>
                        <td>${course.TIME_FROM} - ${course.TIME_TO}</td>
                        <td>${course.sched_room}</td>
                        <td>${course.sched_semester}</td>
                        <td>${course.sched_sy}</td>
                        <td>
                            <button onclick="editSchedule(${course.course_id})">Edit Schedule</button>
                        </td>
                    </tr>
                `).join('');
                courseRow.style.display = 'table-row';
            } else {
                console.log('No courses available for this section.');
                const courseTableBody = document.querySelector(`#courses-table-${sectionId} tbody`);
                courseTableBody.innerHTML = `<tr><td colspan="7">No courses available</td></tr>`;
                courseRow.style.display = 'table-row';
            }
        } catch (error) {
            console.error('Error fetching courses:', error);
        }
    } else {
        courseRow.style.display = 'none';
    }
};


const loadCourses = async (sectionId) => {
    const coursesTable = document.getElementById('coursesTable');
    const tableBody = coursesTable.querySelector('tbody');

    try {
        const response = await fetch(`/get-courses?section_id=${sectionId}`);
        if (!response.ok) throw new Error('Failed to fetch courses');

        const courses = await response.json();

        // Populate the courses table
        if (Array.isArray(courses) && courses.length > 0) {
            tableBody.innerHTML = courses.map(course => `
                <tr>
                    <td>${course.course_code}</td>
                    <td>${course.sched_day === 'Monday' ? `${course.TIME_FROM || ''} - ${course.TIME_TO || ''}` : ''}</td>
                    <td>${course.sched_day === 'Tuesday' ? `${course.TIME_FROM || ''} - ${course.TIME_TO || ''}` : ''}</td>
                    <td>${course.sched_day === 'Wednesday' ? `${course.TIME_FROM || ''} - ${course.TIME_TO || ''}` : ''}</td>
                    <td>${course.sched_day === 'Thursday' ? `${course.TIME_FROM || ''} - ${course.TIME_TO || ''}` : ''}</td>
                    <td>${course.sched_day === 'Friday' ? `${course.TIME_FROM || ''} - ${course.TIME_TO || ''}` : ''}</td>
                    <td>
                        <button onclick="editSchedule(${course.course_id})">Edit Schedule</button>
                    </td>
                </tr>
            `).join('');

            coursesTable.style.display = 'table'; // Show the table
        } else {
            tableBody.innerHTML = `
                <tr>
                    <td colspan="7">No courses available for this section.</td>
                </tr>
            `;
            coursesTable.style.display = 'table'; // Show the table even if empty
        }
    } catch (error) {
        console.error('Error fetching courses:', error);
    }
};


</script>