<div>
    <h2>Section List</h2>
    <button id="addSectionButton">Add Section</button>

    <table border="1" id="sectionTable">
        <thead>
            <tr>
                <th>Section</th>
                <th>Program</th>
                <th>Semester</th>
                <th>Year Level</th>
                <th>Course Count</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <!-- Dynamically populated with JavaScript -->
        </tbody>
    </table>
</div>

<div style="display: flex; flex-direction: column;">

    <!-- Table for displaying courses -->
    <table id="coursesTable" border="1" style="width: 100%; margin-top: 20px; display: none;">
        <thead>
            <tr>
                <th>Course Code</th>
                <th>Monday</th>
                <th>Tuesday</th>
                <th>Wednesday</th>
                <th>Thursday</th>
                <th>Friday</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <!-- Rows will be dynamically inserted here -->
        </tbody>
    </table>
</div>




<tbody id="sectionTableBody">
    <!-- Dynamically populated with JavaScript -->
</tbody>

<!-- Add Section Modal -->
<div id="addSectionModal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeAddSectionModal()">&times;</span>
        <h3>Add Section</h3>
        <form id="addSectionForm">
            <label for="program">Program:</label>
            <select id="program" name="program_id" required>
                {{#programs}}
                <option value="{{id}}">{{program_code}}</option>
                {{/programs}}
            </select>

            <label for="semester">Semester:</label>
            <select id="semester" name="semester" required>
                <option value="1st Sem">1st Sem</option>
                <option value="2nd Sem">2nd Sem</option>
            </select>

            <label for="yearLevel">Year Level:</label>
            <select id="yearLevel" name="year_level" required>
                <option value="1">1st Year</option>
                <option value="2">2nd Year</option>
                <option value="3">3rd Year</option>
                <option value="4">4th Year</option>
            </select>

            <label for="sectionName">Section Name:</label>
            <input type="text" id="sectionName" name="name" required>

            <button type="submit">Add Section</button>
        </form>
    </div>
</div>

<!-- Edit Schedule Modal -->
<!-- Edit Schedule Modal -->
<div id="editScheduleModal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeEditScheduleModal()">&times;</span>
        <h3>Edit Schedule</h3>
        <form id="editScheduleForm">
            <input type="hidden" id="courseId" name="course_id">
            <input type="hidden" id="programId" name="program_id">

            <!-- Display non-editable foreign keys -->
            <div>
                <label>Program ID:</label>
                <span id="displayProgramId"></span>
            </div>
            <div>
                <label>Course ID:</label>
                <span id="displayCourseId"></span>
            </div>

            <!-- Editable fields -->
            <div>
                <h4>Schedule</h4>
                <!-- Monday -->
                <div style="margin-bottom: 10px;">
                    <label>Monday:</label>
                    <input type="checkbox" id="monday_enabled" name="days[]" value="Monday">
                    <input type="time" id="monday_start" name="monday_start" disabled>
                    <input type="time" id="monday_end" name="monday_end" disabled>
                </div>
                <!-- Tuesday -->
                <div style="margin-bottom: 10px;">
                    <label>Tuesday:</label>
                    <input type="checkbox" id="tuesday_enabled" name="days[]" value="Tuesday">
                    <input type="time" id="tuesday_start" name="tuesday_start" disabled>
                    <input type="time" id="tuesday_end" name="tuesday_end" disabled>
                </div>
                <!-- Wednesday -->
                <div style="margin-bottom: 10px;">
                    <label>Wednesday:</label>
                    <input type="checkbox" id="wednesday_enabled" name="days[]" value="Wednesday">
                    <input type="time" id="wednesday_start" name="wednesday_start" disabled>
                    <input type="time" id="wednesday_end" name="wednesday_end" disabled>
                </div>
                <!-- Thursday -->
                <div style="margin-bottom: 10px;">
                    <label>Thursday:</label>
                    <input type="checkbox" id="thursday_enabled" name="days[]" value="Thursday">
                    <input type="time" id="thursday_start" name="thursday_start" disabled>
                    <input type="time" id="thursday_end" name="thursday_end" disabled>
                </div>
                <!-- Friday -->
                <div style="margin-bottom: 10px;">
                    <label>Friday:</label>
                    <input type="checkbox" id="friday_enabled" name="days[]" value="Friday">
                    <input type="time" id="friday_start" name="friday_start" disabled>
                    <input type="time" id="friday_end" name="friday_end" disabled>
                </div>
            </div>

            <label for="semester">Semester:</label>
            <select id="semester" name="sched_semester" required>
                <option value="1st Sem">1st Sem</option>
                <option value="2nd Sem">2nd Sem</option>
            </select>

            <label for="schoolYear">School Year:</label>
            <input type="text" id="schoolYear" name="sched_sy" placeholder="2023-2024" required>

            <label for="room">Room:</label>
            <input type="text" id="room" name="sched_room" required>

            <button type="submit">Save Schedule</button>
        </form>
    </div>
</div>





<style>
    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        padding-top: 100px;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
    }

    .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 50%;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

    .close:hover,
    .close:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
    }
</style>


<script>

    
// Load all sections on page load
const loadSections = async () => {
    try {
        const response = await fetch('/api/sections'); // Use your API route
        if (!response.ok) throw new Error('Failed to fetch sections');

        const data = await response.json();

        // Render sections
        const tableBody = document.querySelector('#sectionTable tbody');
        tableBody.innerHTML = data.sections.map(section => `
            <tr>
                <td>${section.name}</td>
                <td>${section.program_code}</td>
                <td>${section.semester}</td>
                <td>${section.year_level}</td>
                <td>${section.course_count || 0}</td>
                <td>
                    <button onclick="editSection(${section.id})">Edit</button>
                    <button onclick="deleteSection(${section.id})">Delete</button>
                    <button onclick="loadCourses(${section.id})">Load Courses</button>
                </td>
            </tr>
        `).join('');
    } catch (error) {
        console.error('Error fetching sections:', error);
    }
};

// Function for "Load Courses" button
const loadCourses = async (sectionId) => {
    const coursesTable = document.getElementById('coursesTable');
    const tableBody = coursesTable.querySelector('tbody');

    try {
        const response = await fetch(`/sections/courses/${sectionId}`);
        if (!response.ok) throw new Error('Failed to fetch courses');

        const courses = await response.json();
        console.log('Courses data:', courses);
        

        if (Array.isArray(courses) && courses.length > 0) {

            const groupedCourses = groupCoursesByCode(courses);
            // Populate courses table
            tableBody.innerHTML = groupedCourses.map(course => `
                <tr>
                    <td>${course.course_code}</td>
                    <td>${course.Monday || ''}</td>
                    <td>${course.Tuesday || ''}</td>
                    <td>${course.Wednesday || ''}</td>
                    <td>${course.Thursday || ''}</td>
                    <td>${course.Friday || ''}</td>
                    <td><button onclick="editSchedule('${course.course_id}, ${course.program_id}')">Edit</button></td>
                </tr>
            `).join('');
        
            coursesTable.style.display = 'table';
        } else {
             // Fetch courses by program_id and year_level if no schedules
             const responseAllCourses = await fetch(`/get-courses/${sectionId}`);
             if (!responseAllCourses.ok) throw new Error('Failed to fetch courses by program and year');
 
             const allCourses = await responseAllCourses.json();
             tableBody.innerHTML = allCourses.map(course => `
                 <tr>
                     <td>${course.course_code}</td>
                     <td></td>
                     <td></td>
                     <td></td>
                     <td></td>
                     <td></td>
                     <td><button onclick="editSchedule('${course.id}, ${course.program_id}')">Edit</button></td>
                 </tr>
             `).join('') || `<tr><td colspan="7">No courses available.</td></tr>`;
             coursesTable.style.display = 'table';
         }
        
    } catch (error) {
        console.error('Error fetching courses:', error);
    }
};

const groupCoursesByCode = (courses) => {
    const grouped = {};

    courses.forEach(course => {
        if (!grouped[course.course_code]) {
            grouped[course.course_code] = {
                course_code: course.course_code,
                course_id: course.id, // Ensure you have course_id
                program_id: course.program_id, // Ensure you have program_id
                Monday: '',
                Tuesday: '',
                Wednesday: '',
                Thursday: '',
                Friday: ''
            };
        }

        // Add schedule for the respective day
        if (course.sched_day && course.TIME_FROM && course.TIME_TO) {
            grouped[course.course_code][course.sched_day] = `${course.TIME_FROM} - ${course.TIME_TO}`;
        }
    });

    return Object.values(grouped); // Convert the object back to an array
};



loadSections();




// Open the Add Section modal
const addSectionModal = document.getElementById('addSectionModal');
document.getElementById('addSectionButton').onclick = () => {
    loadPrograms(); // Populate program dropdown
    addSectionModal.style.display = 'block';
};

const closeAddSectionModal = () => {
    addSectionModal.style.display = 'none';
};

// Load program options
const loadPrograms = async () => {
    const response = await fetch('/programs');
    const programs = await response.json();

    const programDropdown = document.getElementById('program');
    programDropdown.innerHTML = programs.map(program => `
        <option value="${program.id}">${program.program_code}</option>
    `).join('');
};

// Add a section
document.getElementById('addSectionForm').onsubmit = async (event) => {
    event.preventDefault();
    const formData = new FormData(event.target);

    await fetch('/section', {
        method: 'POST',
        body: formData
    });

    closeAddSectionModal();
    loadSections();
};

// Edit a section
const editSection = async (sectionId) => {
    const response = await fetch(`/section/${sectionId}`);
    const section = await response.json();

    // Populate the Add Section form for editing
    document.getElementById('program').value = section.program_id;
    document.getElementById('semester').value = section.semester;
    document.getElementById('yearLevel').value = section.year_level;
    document.getElementById('sectionName').value = section.name;

    addSectionModal.style.display = 'block';
};

// Delete a section
const deleteSection = async (sectionId) => {
    if (confirm('Are you sure you want to delete this section?')) {
        await fetch(`/section/${sectionId}`, { method: 'DELETE' });
        loadSections();
    }
};


const editSchedule = async (courseId, programId) => {
    try {
        console.log('editSchedule called with courseId:', courseId, 'programId:', programId);

        // Fetch existing schedule details for the course
        const response = await fetch(`/schedule/${courseId}`);
        let schedules = [];

        if (response.ok) {
            const data = await response.json();
            console.log('Schedules data:', data); // For debugging

            // Ensure schedules is always an array
            schedules = Array.isArray(data) ? data : (data ? [data] : []);
        } else {
            schedules = [];
        }

        // Check if schedules is now an array
        console.log('Normalized schedules:', schedules);

        // Populate modal fields
        document.getElementById('courseId').value = courseId;
        document.getElementById('programId').value = programId;
        document.getElementById('displayCourseId').innerText = courseId;
        document.getElementById('displayProgramId').innerText = programId;

        // For each day, populate the schedule if it exists
        const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];
        days.forEach(day => {
            const scheduleForDay = schedules.find(s => s.sched_day === day);
            const enabledCheckbox = document.getElementById(`${day.toLowerCase()}_enabled`);
            const startTimeInput = document.getElementById(`${day.toLowerCase()}_start`);
            const endTimeInput = document.getElementById(`${day.toLowerCase()}_end`);

            if (scheduleForDay) {
                enabledCheckbox.checked = true;
                startTimeInput.disabled = false;
                endTimeInput.disabled = false;
                startTimeInput.value = scheduleForDay.TIME_FROM || '';
                endTimeInput.value = scheduleForDay.TIME_TO || '';
            } else {
                enabledCheckbox.checked = false;
                startTimeInput.disabled = true;
                endTimeInput.disabled = true;
                startTimeInput.value = '';
                endTimeInput.value = '';
            }
        });

        // Other fields (assuming they are consistent across schedules)
        const schedule = schedules[0] || {};
        document.getElementById('semester').value = schedule.sched_semester || '';
        document.getElementById('schoolYear').value = schedule.sched_sy || '';
        document.getElementById('room').value = schedule.sched_room || '';

        // Show the modal
        document.getElementById('editScheduleModal').style.display = 'block';
    } catch (error) {
        console.error('Error loading schedule:', error);
        alert('Failed to load schedule. Please try again.');
    }
};


// Add event listeners to enable/disable time inputs based on checkbox
const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];
days.forEach(day => {
    const checkbox = document.getElementById(`${day.toLowerCase()}_enabled`);
    const startTimeInput = document.getElementById(`${day.toLowerCase()}_start`);
    const endTimeInput = document.getElementById(`${day.toLowerCase()}_end`);

    checkbox.addEventListener('change', function() {
        const isEnabled = this.checked;
        startTimeInput.disabled = !isEnabled;
        endTimeInput.disabled = !isEnabled;
    });
});



const closeEditScheduleModal = () => {
    document.getElementById('editScheduleModal').style.display = 'none';
};


document.getElementById('editScheduleForm').onsubmit = async (event) => {
    event.preventDefault();

    const formData = new FormData(event.target);
    const courseId = formData.get('course_id');
    const programId = formData.get('program_id');

    const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];

    // Collect the schedule data
    const scheduleEntries = days.map(day => {
        const isEnabled = document.getElementById(`${day.toLowerCase()}_enabled`).checked;
        if (isEnabled) {
            const timeFrom = document.getElementById(`${day.toLowerCase()}_start`).value;
            const timeTo = document.getElementById(`${day.toLowerCase()}_end`).value;
            return {
                course_id: courseId,
                program_id: programId,
                sched_day: day,
                TIME_FROM: timeFrom,
                TIME_TO: timeTo,
                sched_semester: formData.get('sched_semester'),
                sched_sy: formData.get('sched_sy'),
                sched_room: formData.get('sched_room'),
            };
        } else {
            return null;
        }
    }).filter(entry => entry !== null); // Remove null entries

    try {
        const response = await fetch('/save-schedule', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(scheduleEntries),
        });

        if (!response.ok) throw new Error('Failed to save schedule.');

        const result = await response.json();
        console.log('Schedule saved:', result);
        closeEditScheduleModal();

        // Optionally, refresh the courses table to reflect the changes
        // loadCourses(sectionId); // You might need to keep track of the current sectionId
    } catch (error) {
        console.error('Error saving schedule:', error);
        alert('Failed to save schedule. Please try again.');
    }
};



</script>